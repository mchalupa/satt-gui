#!/usr/bin/env python
#
# Copyright (c) 2015 Marek Chalupa
# statica@fi.muni.cz
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that copyright
# notice and this permission notice appear in supporting documentation, and
# that the name of the copyright holders not be used in advertising or
# publicity pertaining to distribution of the software without specific,
# written prior permission. The copyright holders make no representations
# about the suitability of this software for any purpose. It is provided "as
# is" without express or implied warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
# EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#

from gi.repository import Gtk, GtkSource
from subprocess import Popen, PIPE

import sys

# FIXME do this configurable
server = 'arran.fi.muni.cz'
user = 'statica'
remote_dir = 'satt'

help_page_text = """
Statica tools tester GUI

Select a tool which to run, configure and run!
"""

class ToolPage(object):
    def __init__(self, tool, tv = None, tb = None):
        self.tool = tool
        # one of these widgets is always active
        self.run = None
        self.logs = None
        self.results = None

        self.box = None # box containing these items
        self.active = None

class SattProxy(object):
    def __init__(self):
        global user
        global server
        global remote_dir
        self.ssh = ['ssh', '{0}@{1}'.format(user, server)]
        self.satt = self.ssh[:] + ['{0}/satt'.format(remote_dir)]

    def _run(self, cmd):
        p = Popen(cmd, stdout = PIPE, stderr = PIPE)
        out, err = p.communicate()

        return (p.returncode, out, err)

    def getConfigFile(self, tool):
        cmd = self.ssh[:]
        cmd.append('cat')

        global remote_dir
        cmd.append('{0}/{1}/config'.format(remote_dir, tool))

        return self._run(cmd)

    def getLogFile(self, log):
        cmd = self.ssh[:]
        cmd.append('cat')

        global remote_dir
        cmd.append('{0}/{1}'.format(remote_dir, log))

        return self._run(cmd)

    def getTools(self):
        return ['tool1', 'tool2', 'tool3']
        global remote_dir
        cmd = self.ssh[:]
        cmd.append('find')
        cmd.append(remote_dir)
        cmd.append('-name')
        cmd.append('config')

        ok, lst, err = self._run(cmd)
        if ok != 0:
            return []

        tools = []
        for line in iter(lst.splitlines()):
            # the prefix is satt and suffix config, like:
            # satt/symbiotic/config
            t = line[5:-7]

            if t != '.git' and t != 'database':
                tools.append(t)

        return tools

    def getLogsList(self, tool):
        global remote_dir
        cmd = self.ssh[:]
        cmd.append('find')
        cmd.append(remote_dir)
        cmd.append('-name')
        cmd.append('{0}.*'.format(tool))

        ok, lst, err = self._run(cmd)
        if ok != 0:
            return []

        logs = []
        for line in iter(lst.splitlines()):
            # the prefix is satt and suffix config, like:
            # satt/symbiotic/config
            t = line[5:]
            logs.append(t)

        return logs

    def run(self, *arguments):
        cmd = self.satt[:]
        for a in arguments:
            cmd.append(a)

        return self._run(cmd)

def _createTextWin():
    langm = GtkSource.LanguageManager()
    lang = langm.get_language('python')

    win = Gtk.ScrolledWindow()
    buff = GtkSource.Buffer()
    buff.set_language(lang)
    text = GtkSource.View.new_with_buffer(buff)

    win.add(text)
    return (win, text, buff)

class RunPage(object):
    def __init__(self):
        win, self.textview, self.textbuf = _createTextWin()
        self.box = Gtk.VBox()
        self.buttons_box = Gtk.HBox()

        self.textbuf.set_text('text window')
        self._addBottomButtons()

        self.box.pack_start(win, True, True, 5)
        self.box.pack_start(Gtk.HSeparator(), False, False, 3)
        self.box.pack_start(self.buttons_box, False, False, 5)

    def _addBottomButtons(self):
        def run_button_cb(widget):
            pass

        def send_mail_btn_cb(btn):
            if btn.get_active():
                pass

        send_email_btn = Gtk.CheckButton("Send e-mail")
        send_email_btn.connect("toggled", send_mail_btn_cb)
        send_email_btn.set_active(True)
        self.buttons_box.pack_start(send_email_btn, False, False, 10)

        # add run button
        run_button = Gtk.Button(label="Run!")
        run_button.connect("clicked", run_button_cb)
        self.buttons_box.pack_end(run_button, False, False, 0)

        # add note entry
        lbl = Gtk.Label("note:")
        self.note = Gtk.Entry()
        self.buttons_box.pack_end(self.note, False, False, 5)
        self.buttons_box.pack_end(lbl, False, False, 5)

class LogsPage(object):
    def __init__(self):
        self.box = Gtk.HBox()
        stack = Gtk.Stack()
        stack.set_transition_type(Gtk.StackTransitionType.SLIDE_UP_DOWN)
        stack.set_transition_duration(500)

        stackbar = Gtk.StackSidebar()
        stackbar.set_stack(stack)

        logs = ['log1dsafsdfdsf', 'log2sadfsdaffds', 'log3asdsdf']
        for l in logs:
            stack.add_titled(self.create_log_row(l), l, l)

        self.box.pack_start(stackbar, False, False, 10)
        self.box.pack_start(Gtk.VSeparator(), False, False, 3)
        self.box.pack_start(stack, True, True, 0)

    def create_log_row(self, log):
        win, text, textbuf = _createTextWin()
        textbuf.set_text(log)

        return win

class SattGui(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title='Statica Tool Tester')
        self.satt = SattProxy()

        self.set_default_size(600, 400)
        self._addNotebook()

    def _createNotebookPage(self, tool):
        stack = Gtk.Stack()
        stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stack.set_transition_duration(500)

        stackswitcher = Gtk.StackSwitcher(1)
        stackswitcher.set_stack(stack)

        tp = ToolPage(tool)
        tp.box = Gtk.VBox()
        tp.box.pack_start(stackswitcher, False, False, 0)
        tp.box.pack_start(stack, True, True, 0)

        tp.run = RunPage()
        tp.logs = LogsPage()

        stack.add_titled(tp.run.box, 'run', 'Run')
        stack.add_titled(tp.logs.box, 'logs', 'Logs')
        stack.add_titled(Gtk.Label('Results: Not Implemented'),
                         'results', 'Results')

        return tp

    def _addNotebookPages(self, tools):
        for tool in tools:
            # hmm, we could iterate over child, but whatever
            tp = self._createNotebookPage(tool)
            self.notebook.append_page(tp.box, Gtk.Label(tool))

    def _addNotebook(self):
        tools = self.satt.getTools()
        if not tools:
            lbl = Gtk.Label("Sorry, got no tools to display")
            self.add(lbl)
            return

        self.notebook = Gtk.Notebook()
        self.add(self.notebook)

        self._addNotebookPages(tools)
        self.notebook.connect('switch-page', self.page_selected_cb)

    def page_selected_cb(self, notebook, page, data):
        pass
       #if tp.textbuffer.get_char_count() == 0:
       #    ok, cfg, err = self.satt.getConfigFile(tp.tool)
       #    if ok != 0:
       #        tp.textbuffer.set_text('Failed getting config file: {0}'.format(err))
       #        return
       #    else:
       #        tp.textbuffer.set_text(cfg)


if __name__ == "__main__":
    gui = SattGui()
    gui.connect("delete-event", Gtk.main_quit)
    gui.show_all()
    Gtk.main()
